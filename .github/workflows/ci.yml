name: ECE-CLI Autonomous Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Lint and type check
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'generated-app/package-lock.json'

      - name: Install dependencies
        working-directory: ./generated-app
        run: npm ci

      - name: Run ESLint
        working-directory: ./generated-app
        run: npm run lint

      - name: Run TypeScript check
        working-directory: ./generated-app
        run: npm run type-check

  # Unit and integration tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ece_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'generated-app/package-lock.json'

      - name: Install dependencies
        working-directory: ./generated-app
        run: npm ci

      - name: Run unit tests
        working-directory: ./generated-app
        run: npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ece_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Run integration tests
        working-directory: ./generated-app
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ece_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./generated-app/coverage/lcov.info

  # Docker build and test
  docker-test:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker-compose -f docker/docker-compose.yml build

      - name: Start services
        run: |
          docker-compose -f docker/docker-compose.yml up -d

      - name: Wait for services to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'

      - name: Run API tests
        run: |
          # Test health endpoint
          curl -f http://localhost:3000/api/health
          
          # Test auth endpoint
          curl -X POST http://localhost:3000/api/auth \
            -H "Content-Type: application/json" \
            -d '{"provider":"demo"}'

      - name: Check logs for errors
        if: failure()
        run: |
          docker-compose -f docker/docker-compose.yml logs

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker/docker-compose.yml down -v

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and push Docker images (on main branch)
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [lint, test, docker-test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}/frontend
            ghcr.io/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./generated-app
          file: ./docker/Dockerfile.frontend
          target: runner
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend
          target: runner
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
